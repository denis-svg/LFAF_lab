#+PROPERTY: header-args:python   :session :results output :exports both
* Implementation of formal languages
- Course :: Formal Languages & Finite Automata
- Author :: Balan Artiom

* Objectives
#+begin_src python :exports none
from code.grammar import *
from code.automata import *
#+end_src

#+RESULTS:

** Lab 1
- [X] Implement a  =Grammar= and a =FiniteAutomaton=, with the respective methods:
  - =Grammar=
    - =generateString()=
    - =convert_to_FSM()=
  - =FiniteAutomaton=
    - =check_string()=
- [X] Showcase the code:
  - generate 5 words with the grammar
  - create a FSM from the grammar
  - check that the generated words are valid according to the FSM
** Lab 2
- [X] Provide a function in your grammar type/class that could classify the grammar based on Chomsky hierarchy.
- [X] Implement conversion of a finite automaton to a regular grammar.
- [X] Determine whether your FA is deterministic or non-deterministic.
- [X] Implement some functionality that would convert an NDFA to a DFA.
- [X] Represent the finite automaton graphically (Optional, and can be considered as a bonus point):
- [X] Document everything in the README
- [ ] Test string validation with the new more general DFA

Here's the NFA I got:
#+begin_example
Q = {q0,q1,q2,q3,q4},
∑ = {a,b},
F = {q4},
δ(q0,a) = q1,
δ(q1,b) = q1,
δ(q1,a) = q2,
δ(q2,b) = q2,
δ(q2,b) = q3,
δ(q3,b) = q4,
δ(q3,a) = q1.
#+end_example

After manually rewriting it like this:
#+begin_src python
S = {"q0","q1","q2","q3","q4"}
A = {"a","b"}
s0 = "q0"
F = {"q4"}
d = {("q0","a"): {"q1"},
     ("q1","b"): {"q1"},
     ("q1","a"): {"q2"},
     ("q2","b"): {"q2", "q3"},
     ("q3","b"): {"q4"},
     ("q3","a"): {"q1"}}
#+end_src

#+RESULTS:

I can initialize an NFA, and then do many things with it.
#+begin_src python
nfa = NFA(S=S, A=A, s0=s0, d=d, F=F)
#+end_src

#+RESULTS:

*** Convert NFA to Grammar
I can find out the type of the resulting grammar in the Chomsky hierarchy:
#+begin_src python
g = nfa.to_grammar()
print(g.type())
#+end_src

#+RESULTS:
: 3

Or print out the grammar if I format it a bit:
#+begin_src python
for l,r in g.P.items():
    print(''.join(l), '->', ' | '.join([' '.join(t) for t in r]))
#+end_src

#+RESULTS:
: q0 -> a q1
: q1 -> b q1 | a q2
: q2 -> b q3 | b q2
: q3 -> b q4 | a q1
: q4 ->
*** Find out if FA is nondeterministic
Even though it's an NFA, it could be that it doesn't have nondeterministic transitions.
We can find that out:
#+begin_src python
print(nfa.is_deterministic())
#+end_src

#+RESULTS:
: False
*** Convert NFA to DFA
#+begin_src python
dfa = nfa.to_DFA()
print(dfa)
#+end_src

#+RESULTS:
: {frozenset({'q2', 'q3'}), frozenset({'q1'}), frozenset({'q2', 'q4', 'q3'}), frozenset({'q0'}), frozenset({'q2'})}, {'a', 'b'}, {'q0'}, {(frozenset({'q0'}), 'a'): {'q1'}, (frozenset({'q1'}), 'a'): {'q2'}, (frozenset({'q1'}), 'b'): {'q1'}, (frozenset({'q2'}), 'b'): {'q2', 'q3'}, (frozenset({'q2', 'q3'}), 'a'): {'q1'}, (frozenset({'q2', 'q3'}), 'b'): {'q2', 'q4', 'q3'}, (frozenset({'q2', 'q4', 'q3'}), 'a'): {'q1'}, (frozenset({'q2', 'q4', 'q3'}), 'b'): {'q2', 'q4', 'q3'}}, {frozenset({'q2', 'q4', 'q3'})}

Now that we have a DFA, we can easily validate some strings according to the grammar.
But first, let's generate a few:
#+begin_src python
l = [g.constr_word() for _ in range(5)]
print(l)
#+end_src

#+RESULTS:
: ['aabaabbbbbaabbaabaabbaabb', 'abbbabb', 'aabbbbbbbb', 'aabbbbbbb', 'aababbbabbbababbbbbb']

Let's verify that they're all valid:
#+begin_src python
print(all(dfa.verify(w) for w in l))
#+end_src

#+RESULTS:
: True
*** Visualize the finite automatons
Here's the NFA:
#+begin_src python :results file
fn = nfa.draw('./img', 'variant_3_nfa')
print(fn)
#+end_src

#+RESULTS:
[[file:img/variant_3_nfa.gv.svg]]

And the DFA:
#+begin_src python :results file
fn = dfa.draw('./img', 'variant_3_dfa')
print(fn)
#+end_src

#+RESULTS:
[[file:img/variant_3_dfa.gv.svg]]

* Implementation
I wrote very extensive comments inside source code files, so refer to those please.
* Try it out
You can starts playing inside =main.py=.

There are a few tests that you can run with =pytest=,
but they're not very extensive.
Also pls don't look inside, I'll refactor them I promise.

* Theory
An instance of a *formal language* is a set of /words/ which are composed of /letters/.
The set of words can be defined in many ways:
- by simply enumerating all the valid elements (words)
- by defining an alphabet and a grammar

An *alphabet* is a set of letters.

A *grammar* is a set of rules that define how to form valid words from the alphabet.

A regular grammar is one in which all production rules in P are of one of the following forms:
- A → a
- A → aB
- A → ε
where A, B, S ∈ N are non-terminal symbols, a ∈ Σ is a terminal symbol,
and ε denotes the empty string, i.e. the string of length 0. S is called the start symbol.
